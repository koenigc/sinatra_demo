h1. Sinatra Demo mit Mehrsprachigkeit

Dieses "Projekt" soll feststellen, ob und wie eine Mehrsprachige Seite mit Sinatra umgesetzt werden kann.
Sinatra kann bei Projekten eingesetzt werden, bei denen eine Rails- App zu viel Performance "verbraten" würde.

h2. Was wird verwendet

* Sinatra
* R18n
* HAML
* SASS
* Sanitize (benötigt hpricot)

h3. Sinatra

Hier könnte noch etwas zu Sinatra selbst geschrieben werden. Einen schnellen Einstieg findet man auf der "Homepage":http://www.sinatrarb.com/ unter dem Menüpunkt "Readme":http://www.sinatrarb.com/intro.html

h3. R18n

Tool zum internationalisieren von Merb, Sinatra und Destop Ruby Applikationen.
Eine kurze Einführung gibts auf der "Homepage":http://r18n.rubyforge.org/#sinatra und im "GitHub":http://github.com/ai/r18n/tree/master

h3. HAML und SASS

Eine Alternative zu ERB Templates(HAML) und CSS- Dateien (SASS).
Weiter Infos für "HAML":http://haml-lang.com/ und "SASS":http://sass-lang.com/ auf den jeweiligen Seiten.

h3. Sanitize

Kurz gesagt: Gem zum absichern von Furmulareingaben. Eine Einführung gibts im GitHub: "http://github.com/rgrove/sanitize/tree/master":http://github.com/rgrove/sanitize/tree/master bzw. hier: "http://wonko.com/post/sanitize":http://wonko.com/post/sanitize


h2. Installation

Um diese Demo starten zu können, wird Ruby und folgende (Ruby-)Gems benötigt: *sinatra, sinatra-r18n, haml*

<pre>
sudo gem install sinatra sinatra-r18n haml hpricot sanitize
</pre>
Es sollten nun folgende Gems installiert sein. Die Versionsnummern könnten ggf. neuer sein als zur Drucklegung dieses Dokumentes.:
<pre>
haml (2.2.2)
hpricot (0.8.1)
sanitize (1.0.8)
sinatra (0.9.4)
sinatra-r18n (0.2.3)
</pre>

zum Starten der App wird einfach die Ruby Datei ausführen: @ruby myapp.rb@
<pre>
== Sinatra/0.9.4 has taken the stage on 4567 for development with backup from Mongrel
</pre>

Wenn alles funktioniert hat, ist die Seite nun im Browser unter "http://127.0.0.1:4567":http://127.0.0.1:4567 erreichbar.


h2. Mehrsprachigkeit

Die übersetzungen werden im Ordner ./i18n als YAML gespeichert. Für jede Sprache gibt es eine eintsprechende Datei. z.B. en.yml für English, de.yml für Deutsch. Der Aufbau dieser Dateien ist auf den Seiten von R18n beschrieben. Datums, Währungs und Default- Translations sind ebensovorhanden wie eine Pluralisierung.

Die Sprache wird über den Parameter @params[:locale]@ ausgelesen. R18n schaut zuerst nach, ob dieser Paramter gesetzt ist. Ist dies nicht der Fall, wird versucht die Sprach aus einer Session zu ermitteln, bevor die Default- Sprache EN geladen wird.

Mit einer Session, in der die aktuell verwendete Sprache gespeichert wird, kann die Sprache auch über Links hinweg erhalten bleiben, ohne die aktuelle Sprache als Parameter an den Link einzufügen.

Dazu muss einmal die Session aktiviert werden, und dann der Parameter in der Session abgespeichert werden:
<code>
<pre>
enable  :sessions
...
session[:locale] = params[:locale] if params[:locale]
</pre>
</code>

In den Views kann dann wie folgt auf die Translations zugegriffen werden:

<code>
<pre>
%p= i18n.post.friends
</pre>
</code>

Die zugehörige Sprachdatei hat folgenden Aufbau:
<code>
<pre>
post:
  friends: Post only for friends
  tags: Post tags: %1
</pre>
</code>


h2. Ajax

Um Ajax benutzen zu können, wurde auf jQuery und das Plugin jQuery.Form zurückgegriffen. Die beiden Scripte wurden im Order ./public hinterlegt, und in der Layout Datei eingebunden. Eine einfache Einführung in jQuery.Form gibts "hier":http://malsup.com/jquery/form/ . Die "Registriung" der Ajax Funktion wurde in der Datei ./public/ajax.js implementiert. Diese ist ebenfalls in der Layout Datei eingebunden.

Zur Verarbeitung des Ajax Request ist folgender Code in der Datei myapp.rb zuständig:
<pre>
<code>
  post '/form' do
    @my_name = params[:name]
    haml :form_response, :layout => !request.xhr?
  end
</code>
</pre>

Wenn es sich nicht um einen Ajax- Request handelt, wird das Layout gerendert (request.xhr? => false). Ansonsten liefert die Funktion nur das gerenderte Template zurück. Wie genau die Rückgabe verarbeitet wird, wurde in der ./public/ajax.js definiert. In diesem Fall wird ein Div mit der ID #htmlExampleTarget mit dem Rückgabewert befüllt.


h2. Sanitizing

Dient zum validieren / säubern von Zeichenketten, üblicherweise aus GET oder POST Parametern.
Die übergebene Zeichenketter wird "gesäubert" zurückgegeben. Jenachdem wie "stark" der Filter eingestellt wurde, überlegen mehr oder weniger Html- Tags / Zeichen den Filter:

@my_name = Sanitize.clean(params[:name])@

<pre>
<code>
html = '<b><a href="http://foo.com/">foo</a></b><img src="http://foo.com/bar.jpg" />'

Sanitize.clean(html) # => 'foo'
Sanitize.clean(html, Sanitize::Config::RESTRICTED) # => '<b>foo</b>'
Sanitize.clean(html, Sanitize::Config::BASIC) # => '<b><a href="http://foo.com/" rel="nofollow">foo</a></b>'
Sanitize.clean(html, Sanitize::Config::RELAXED) # => '<b><a href="http://foo.com/">foo</a></b><img src="http://foo.com/bar.jpg" />'
</code>
</pre>

Mehr gibts als RDoc "http://rgrove.github.com/sanitize/":http://rgrove.github.com/sanitize/

h2. Passenger

Um nicht jedesmal bei einer Änderung das Ruby Script neustarten zu müssen, kann man die Sinatra Scripte auch mit dem Passenger (Apache Module) starten lassen.

Hier steht wies geht: "http://blog.zerosum.org/2008/7/4/passenger-3-sinatra":http://blog.zerosum.org/2008/7/4/passenger-3-sinatra
Sehr simpel, daher denke ich, dass keine weiter Erklärung notwendig ist. Falls doch, wendet euch gerne an mich.


h2. BDD / Test mit Cucumber

h3. Informationen

Aslak Hellesøy hat im Wiki von Cucumber beschrieben, wie man eine Sinatra- App mit Cucumber und Webrat testen kann.
"http://wiki.github.com/aslakhellesoy/cucumber/sinatra":http://wiki.github.com/aslakhellesoy/cucumber/sinatra

Ich habe hier weitere Beispiele gefunden.
* http://github.com/aslakhellesoy/cucumber/tree/da9df2a190b00da5d56e61ec09fda965532eaf6f/examples/sinatra
* http://tooky.github.com/2009/02/05/getting-started-with-cucumber-and-sinatra.html

h3. Ausführen der Features

Die Features können mit dem folgenden Rake Task im Projektordner ausgeführt werden:
<code>rake fetures.</code>

h3. Fehler / Problme

Zur Zeit gibt es noch ein Problem mit R18n. Es werden nicht die übersetzten Text angezeigt (in der Response), sondern nur die Indizes der Translateion. Daher sind im Feature folgende Tests vorhanden bzw. auskommentiert:

<pre>
<code>
# Then I should see 'Wie ist dein Name'
Then I should see 'form.label.name'

# Then I should see 'Willkommen Karl Napf!'
Then I should see 'form.response'
</code>
</pre>


folgender Code macht ebenfalls noch Probleme:
<pre>
<code>
before do
  session[:locale] = params[:locale] if params[:locale]
end
</code>
</pre>

Ich vermute, dass es hier zu einem Konflikt mit dem @before@ aus RSpec kommt.
An einer Lösung muss noch gefeilt werden.